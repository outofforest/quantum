// Code generated by command: go run avo.go -out ../asm.s -stubs ../asm_stub.go -pkg compare. DO NOT EDIT.

#include "textflag.h"

// func Compare(v uint64, x *uint64, z *uint64, count uint64) (uint64, uint64)
// Requires: AVX512DQ, AVX512F, AVX512VL
TEXT Â·Compare(SB), NOSPLIT, $8-48
	MOVQ         count+24(FP), AX
	MOVD         $0x0000000000000000, CX
	MOVD         $0x0000000000000000, DX
	MOVD         $0xffffffffffffffff, SI
	MOVD         $0xffffffffffffffff, BX
	MOVD         $0x0000000000000000, DI
	VPBROADCASTQ DI, Z0
	MOVQ         v+0(FP), DI
	VPBROADCASTQ DI, Z1
	MOVQ         z+16(FP), R14
	MOVQ         x+8(FP), R15

loopChunks8true:
	CMPQ      AX, $0x08
	JL        exit8
	SUBQ      $0x08, AX
	VMOVDQU64 (R15), Z2
	ADDQ      $0x40, R15
	VPCMPEQQ  Z2, Z1, K1
	MOVD      $0x0000000000000000, BP
	KMOVB     K1, BP

loopBits8true:
	TESTQ BP, BP
	JZ    exitLoopBits8true
	BSFQ  BP, R8
	BTRQ  R8, BP
	ADDQ  CX, R8
	MOVD  R8, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits8true

exitLoopBits8true:
	VPCMPEQQ Z2, Z0, K1
	KMOVB    K1, BP
	TESTQ    BP, BP
	JZ       exitZero8
	BSFQ     BP, SI
	ADDQ     CX, SI
	ADDQ     $0x08, CX
	JMP      zeroFound8

exitZero8:
	ADDQ $0x08, CX
	JMP  loopChunks8true

zeroFound8:
loopChunks8false:
	CMPQ      AX, $0x08
	JL        exit8
	SUBQ      $0x08, AX
	VMOVDQU64 (R15), Z2
	ADDQ      $0x40, R15
	VPCMPEQQ  Z2, Z1, K1
	MOVD      $0x0000000000000000, R8
	KMOVB     K1, R8

loopBits8false:
	TESTQ R8, R8
	JZ    exitLoopBits8false
	BSFQ  R8, R9
	BTRQ  R9, R8
	ADDQ  CX, R9
	MOVD  R9, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits8false

exitLoopBits8false:
	ADDQ $0x08, CX
	JMP  loopChunks8false

exit8:
	CMPQ      BX, SI
	JNE       zeroFound4
	CMPQ      AX, $0x04
	JL        exit4
	SUBQ      $0x04, AX
	VMOVDQU64 (R15), Y2
	ADDQ      $0x20, R15
	VPCMPEQQ  Y2, Y1, K1
	MOVD      $0x0000000000000000, R8
	KMOVB     K1, R8

loopBits4true:
	TESTQ R8, R8
	JZ    exitLoopBits4true
	BSFQ  R8, R10
	BTRQ  R10, R8
	ADDQ  CX, R10
	MOVD  R10, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits4true

exitLoopBits4true:
	VPCMPEQQ Y2, Y0, K1
	KMOVB    K1, R8
	TESTQ    R8, R8
	JZ       exitZero4
	BSFQ     R8, SI
	ADDQ     CX, SI
	ADDQ     $0x04, CX
	JMP      zeroFound4

exitZero4:
	ADDQ $0x04, CX
	JMP  exit4

zeroFound4:
	CMPQ      AX, $0x04
	JL        exit4
	SUBQ      $0x04, AX
	VMOVDQU64 (R15), Y2
	ADDQ      $0x20, R15
	VPCMPEQQ  Y2, Y1, K1
	MOVD      $0x0000000000000000, R8
	KMOVB     K1, R8

loopBits4false:
	TESTQ R8, R8
	JZ    exitLoopBits4false
	BSFQ  R8, R11
	BTRQ  R11, R8
	ADDQ  CX, R11
	MOVD  R11, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits4false

exitLoopBits4false:
	ADDQ $0x04, CX

exit4:
	CMPQ      BX, SI
	JNE       zeroFound2
	CMPQ      AX, $0x02
	JL        exit2
	SUBQ      $0x02, AX
	VMOVDQU64 (R15), X2
	ADDQ      $0x10, R15
	VPCMPEQQ  X2, X1, K1
	MOVD      $0x0000000000000000, R8
	KMOVB     K1, R8

loopBits2true:
	TESTQ R8, R8
	JZ    exitLoopBits2true
	BSFQ  R8, R12
	BTRQ  R12, R8
	ADDQ  CX, R12
	MOVD  R12, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits2true

exitLoopBits2true:
	VPCMPEQQ X2, X0, K1
	KMOVB    K1, R8
	TESTQ    R8, R8
	JZ       exitZero2
	BSFQ     R8, SI
	ADDQ     CX, SI
	ADDQ     $0x02, CX
	JMP      zeroFound2

exitZero2:
	ADDQ $0x02, CX
	JMP  exit2

zeroFound2:
	CMPQ      AX, $0x02
	JL        exit2
	SUBQ      $0x02, AX
	VMOVDQU64 (R15), X0
	ADDQ      $0x10, R15
	VPCMPEQQ  X0, X1, K1
	MOVD      $0x0000000000000000, R8
	KMOVB     K1, R8

loopBits2false:
	TESTQ R8, R8
	JZ    exitLoopBits2false
	BSFQ  R8, R13
	BTRQ  R13, R8
	ADDQ  CX, R13
	MOVD  R13, (R14)
	ADDQ  $0x08, R14
	INCQ  DX
	JMP   loopBits2false

exitLoopBits2false:
	ADDQ $0x02, CX

exit2:
	TESTQ AX, AX
	JZ    exit1
	MOVQ  (R15), AX
	CMPQ  AX, DI
	JNE   checkZero
	MOVQ  CX, (R14)

checkZero:
	CMPQ  BX, SI
	JNE   exit1
	TESTQ BX, AX
	JNZ   exit1
	MOVQ  CX, SI

exit1:
	MOVQ SI, ret+32(FP)
	MOVQ DX, ret1+40(FP)
	RET
