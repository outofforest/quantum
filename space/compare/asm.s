// Code generated by command: go run avo.go -out ../asm.s -stubs ../asm_stub.go -pkg compare. DO NOT EDIT.

#include "textflag.h"

// func Compare(v uint64, x *uint64, z *uint64, count uint64) (uint64, uint64)
// Requires: AVX512DQ, AVX512F, AVX512VL
TEXT Â·Compare(SB), NOSPLIT, $8-48
	MOVQ         count+24(FP), AX
	MOVD         $0x0000000000000000, CX
	MOVD         $0x0000000000000000, DX
	MOVD         $0xffffffffffffffff, SI
	MOVD         $0xffffffffffffffff, BX
	VPXORD       Z0, Z0, Z0
	MOVQ         v+0(FP), DI
	VPBROADCASTQ DI, Z1
	MOVQ         z+16(FP), R8
	MOVQ         x+8(FP), R9

loopChunks8true:
	CMPQ      AX, $0x08
	JL        exit8
	SUBQ      $0x08, AX
	VMOVDQA64 (R9), Z2
	ADDQ      $0x40, R9
	VPCMPEQQ  Z2, Z1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits8true:
	TESTQ R10, R10
	JZ    exitLoopBits8true
	BSFQ  R10, R11
	BTRQ  R11, R10
	ADDQ  CX, R11
	MOVD  R11, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits8true

exitLoopBits8true:
	VPCMPEQQ Z2, Z0, K1
	KMOVB    K1, R10
	TESTQ    R10, R10
	JZ       exitZero8
	BSFQ     R10, SI
	ADDQ     CX, SI
	ADDQ     $0x08, CX
	JMP      zeroFound8

exitZero8:
	ADDQ $0x08, CX
	JMP  loopChunks8true

zeroFound8:
loopChunks8false:
	CMPQ      AX, $0x08
	JL        exit8
	SUBQ      $0x08, AX
	VMOVDQA64 (R9), Z2
	ADDQ      $0x40, R9
	VPCMPEQQ  Z2, Z1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits8false:
	TESTQ R10, R10
	JZ    exitLoopBits8false
	BSFQ  R10, R12
	BTRQ  R12, R10
	ADDQ  CX, R12
	MOVD  R12, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits8false

exitLoopBits8false:
	ADDQ $0x08, CX
	JMP  loopChunks8false

exit8:
	CMPQ      BX, SI
	JNE       zeroFound4
	CMPQ      AX, $0x04
	JL        exit4
	SUBQ      $0x04, AX
	VMOVDQA64 (R9), Y2
	ADDQ      $0x20, R9
	VPCMPEQQ  Y2, Y1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits4true:
	TESTQ R10, R10
	JZ    exitLoopBits4true
	BSFQ  R10, R13
	BTRQ  R13, R10
	ADDQ  CX, R13
	MOVD  R13, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits4true

exitLoopBits4true:
	VPCMPEQQ Y2, Y0, K1
	KMOVB    K1, R10
	TESTQ    R10, R10
	JZ       exitZero4
	BSFQ     R10, SI
	ADDQ     CX, SI
	ADDQ     $0x04, CX
	JMP      zeroFound4

exitZero4:
	ADDQ $0x04, CX
	JMP  exit4

zeroFound4:
	CMPQ      AX, $0x04
	JL        exit4
	SUBQ      $0x04, AX
	VMOVDQA64 (R9), Y2
	ADDQ      $0x20, R9
	VPCMPEQQ  Y2, Y1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits4false:
	TESTQ R10, R10
	JZ    exitLoopBits4false
	BSFQ  R10, R14
	BTRQ  R14, R10
	ADDQ  CX, R14
	MOVD  R14, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits4false

exitLoopBits4false:
	ADDQ $0x04, CX

exit4:
	CMPQ      BX, SI
	JNE       zeroFound2
	CMPQ      AX, $0x02
	JL        exit2
	SUBQ      $0x02, AX
	VMOVDQA64 (R9), X2
	ADDQ      $0x10, R9
	VPCMPEQQ  X2, X1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits2true:
	TESTQ R10, R10
	JZ    exitLoopBits2true
	BSFQ  R10, R15
	BTRQ  R15, R10
	ADDQ  CX, R15
	MOVD  R15, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits2true

exitLoopBits2true:
	VPCMPEQQ X2, X0, K1
	KMOVB    K1, R10
	TESTQ    R10, R10
	JZ       exitZero2
	BSFQ     R10, SI
	ADDQ     CX, SI
	ADDQ     $0x02, CX
	JMP      zeroFound2

exitZero2:
	ADDQ $0x02, CX
	JMP  exit2

zeroFound2:
	CMPQ      AX, $0x02
	JL        exit2
	SUBQ      $0x02, AX
	VMOVDQA64 (R9), X0
	ADDQ      $0x10, R9
	VPCMPEQQ  X0, X1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits2false:
	TESTQ R10, R10
	JZ    exitLoopBits2false
	BSFQ  R10, BP
	BTRQ  BP, R10
	ADDQ  CX, BP
	MOVD  BP, (R8)
	ADDQ  $0x08, R8
	INCQ  DX
	JMP   loopBits2false

exitLoopBits2false:
	ADDQ $0x02, CX

exit2:
	TESTQ AX, AX
	JZ    exit1
	MOVQ  (R9), AX
	CMPQ  AX, DI
	JNE   checkZero
	MOVQ  CX, (R8)
	INCQ  DX

checkZero:
	CMPQ  BX, SI
	JNE   exit1
	TESTQ BX, AX
	JNZ   exit1
	MOVQ  CX, SI

exit1:
	MOVQ SI, ret+32(FP)
	MOVQ DX, ret1+40(FP)
	RET
