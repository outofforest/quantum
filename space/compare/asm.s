// Code generated by command: go run avo.go -out ../asm.s -stubs ../asm_stub.go -pkg compare. DO NOT EDIT.

#include "textflag.h"

// func Compare(v uint64, x *uint64, z *uint64, count uint64) (uint64, uint64)
// Requires: AVX512DQ, AVX512F
TEXT Â·Compare(SB), NOSPLIT, $0-48
	MOVQ         count+24(FP), AX
	MOVD         $0x0000000000000000, CX
	MOVD         $0x0000000000000000, DX
	MOVD         $0xffffffffffffffff, BX
	MOVD         $0x0000000000000000, SI
	VPBROADCASTQ SI, Z0
	MOVQ         v+0(FP), SI
	VPBROADCASTQ SI, Z1
	MOVQ         z+16(FP), SI
	MOVQ         x+8(FP), R9

loopChunks:
	TESTQ     AX, AX
	JZ        return
	DECQ      AX
	VMOVDQU64 (R9), Z2
	ADDQ      $0x40, R9
	VPCMPEQQ  Z2, Z1, K1
	MOVD      $0x0000000000000000, R10
	KMOVB     K1, R10

loopBits:
	TESTQ R10, R10
	JZ    exitLoopBits
	BSFQ  R10, DI
	BTRQ  DI, R10
	ADDQ  CX, DI
	MOVD  DI, (SI)
	ADDQ  $0x08, SI
	INCQ  DX
	JMP   loopBits

exitLoopBits:
	VPCMPEQQ Z2, Z0, K1
	KMOVB    K1, R10
	TESTQ    R10, R10
	JZ       exitZero
	BSFQ     R10, BX
	ADDQ     CX, BX
	ADDQ     $0x08, CX
	JMP      zeroFound

exitZero:
	ADDQ $0x08, CX
	JMP  loopChunks

zeroFound:
loopChunks2:
	TESTQ     AX, AX
	JZ        return
	DECQ      AX
	VMOVDQU64 (R9), Z0
	ADDQ      $0x40, R9
	VPCMPEQQ  Z0, Z1, K1
	MOVD      $0x0000000000000000, DI
	KMOVB     K1, DI

loopBits2:
	TESTQ DI, DI
	JZ    exitLoopBits2
	BSFQ  DI, R8
	BTRQ  R8, DI
	ADDQ  CX, R8
	MOVD  R8, (SI)
	ADDQ  $0x08, SI
	INCQ  DX
	JMP   loopBits2

exitLoopBits2:
	ADDQ $0x08, CX
	JMP  loopChunks2

return:
	MOVQ BX, ret+32(FP)
	MOVQ DX, ret1+40(FP)
	RET
