package checksum

import "testing"

func BenchmarkGo(b *testing.B) {
	b.StopTimer()
	b.ResetTimer()

	x := [16]uint32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}
	y := [16]uint32{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}

	b.StartTimer()
	for i := 0; i < b.N; i++ {
		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]

		x[0] += y[0]
		x[1] += y[1]
		x[2] += y[2]
		x[3] += y[3]
		x[4] += y[4]
		x[5] += y[5]
		x[6] += y[6]
		x[7] += y[7]
		x[8] += y[8]
		x[9] += y[9]
		x[10] += y[10]
		x[11] += y[11]
		x[12] += y[12]
		x[13] += y[13]
		x[14] += y[14]
		x[15] += y[15]
	}
	b.StopTimer()
}

func BenchmarkAVX(b *testing.B) {
	b.StopTimer()
	b.ResetTimer()

	x := [16]uint32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}
	y := [16]uint32{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}

	b.StartTimer()
	for i := 0; i < b.N; i++ {
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
		Add(&x, &y, &x)
	}
	b.StopTimer()
}
