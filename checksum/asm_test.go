// Github actions run on machines not supporting AVX-512 instructions.
//go:build nogithub

//nolint:lll

package checksum

import (
	"math/bits"
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTranspose(t *testing.T) {
	x := matrix
	expectedZ := [16][16]uint32{
		{0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0},
		{0x01, 0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71, 0x81, 0x91, 0xa1, 0xb1, 0xc1, 0xd1, 0xe1, 0xf1},
		{0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72, 0x82, 0x92, 0xa2, 0xb2, 0xc2, 0xd2, 0xe2, 0xf2},
		{0x03, 0x13, 0x23, 0x33, 0x43, 0x53, 0x63, 0x73, 0x83, 0x93, 0xa3, 0xb3, 0xc3, 0xd3, 0xe3, 0xf3},
		{0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0x64, 0x74, 0x84, 0x94, 0xa4, 0xb4, 0xc4, 0xd4, 0xe4, 0xf4},
		{0x05, 0x15, 0x25, 0x35, 0x45, 0x55, 0x65, 0x75, 0x85, 0x95, 0xa5, 0xb5, 0xc5, 0xd5, 0xe5, 0xf5},
		{0x06, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76, 0x86, 0x96, 0xa6, 0xb6, 0xc6, 0xd6, 0xe6, 0xf6},
		{0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77, 0x87, 0x97, 0xa7, 0xb7, 0xc7, 0xd7, 0xe7, 0xf7},
		{0x08, 0x18, 0x28, 0x38, 0x48, 0x58, 0x68, 0x78, 0x88, 0x98, 0xa8, 0xb8, 0xc8, 0xd8, 0xe8, 0xf8},
		{0x09, 0x19, 0x29, 0x39, 0x49, 0x59, 0x69, 0x79, 0x89, 0x99, 0xa9, 0xb9, 0xc9, 0xd9, 0xe9, 0xf9},
		{0x0a, 0x1a, 0x2a, 0x3a, 0x4a, 0x5a, 0x6a, 0x7a, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa},
		{0x0b, 0x1b, 0x2b, 0x3b, 0x4b, 0x5b, 0x6b, 0x7b, 0x8b, 0x9b, 0xab, 0xbb, 0xcb, 0xdb, 0xeb, 0xfb},
		{0x0c, 0x1c, 0x2c, 0x3c, 0x4c, 0x5c, 0x6c, 0x7c, 0x8c, 0x9c, 0xac, 0xbc, 0xcc, 0xdc, 0xec, 0xfc},
		{0x0d, 0x1d, 0x2d, 0x3d, 0x4d, 0x5d, 0x6d, 0x7d, 0x8d, 0x9d, 0xad, 0xbd, 0xcd, 0xdd, 0xed, 0xfd},
		{0x0e, 0x1e, 0x2e, 0x3e, 0x4e, 0x5e, 0x6e, 0x7e, 0x8e, 0x9e, 0xae, 0xbe, 0xce, 0xde, 0xee, 0xfe},
		{0x0f, 0x1f, 0x2f, 0x3f, 0x4f, 0x5f, 0x6f, 0x7f, 0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf, 0xef, 0xff},
	}

	var z [16][16]uint32
	Transpose(&[16]*[16]uint32{
		&x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],
		&x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15],
	}, &z)

	require.Equal(t, expectedZ, z)
}

func TestTransposeChunks(t *testing.T) {
	chunks := chunks
	expectedZ := [3][16][16]uint32{
		{
			{0x000, 0x100, 0x200, 0x300, 0x400, 0x500, 0x600, 0x700, 0x800, 0x900, 0xa00, 0xb00, 0xc00, 0xd00, 0xe00, 0xf00},
			{0x001, 0x101, 0x201, 0x301, 0x401, 0x501, 0x601, 0x701, 0x801, 0x901, 0xa01, 0xb01, 0xc01, 0xd01, 0xe01, 0xf01},
			{0x002, 0x102, 0x202, 0x302, 0x402, 0x502, 0x602, 0x702, 0x802, 0x902, 0xa02, 0xb02, 0xc02, 0xd02, 0xe02, 0xf02},
			{0x003, 0x103, 0x203, 0x303, 0x403, 0x503, 0x603, 0x703, 0x803, 0x903, 0xa03, 0xb03, 0xc03, 0xd03, 0xe03, 0xf03},
			{0x004, 0x104, 0x204, 0x304, 0x404, 0x504, 0x604, 0x704, 0x804, 0x904, 0xa04, 0xb04, 0xc04, 0xd04, 0xe04, 0xf04},
			{0x005, 0x105, 0x205, 0x305, 0x405, 0x505, 0x605, 0x705, 0x805, 0x905, 0xa05, 0xb05, 0xc05, 0xd05, 0xe05, 0xf05},
			{0x006, 0x106, 0x206, 0x306, 0x406, 0x506, 0x606, 0x706, 0x806, 0x906, 0xa06, 0xb06, 0xc06, 0xd06, 0xe06, 0xf06},
			{0x007, 0x107, 0x207, 0x307, 0x407, 0x507, 0x607, 0x707, 0x807, 0x907, 0xa07, 0xb07, 0xc07, 0xd07, 0xe07, 0xf07},
			{0x008, 0x108, 0x208, 0x308, 0x408, 0x508, 0x608, 0x708, 0x808, 0x908, 0xa08, 0xb08, 0xc08, 0xd08, 0xe08, 0xf08},
			{0x009, 0x109, 0x209, 0x309, 0x409, 0x509, 0x609, 0x709, 0x809, 0x909, 0xa09, 0xb09, 0xc09, 0xd09, 0xe09, 0xf09},
			{0x00a, 0x10a, 0x20a, 0x30a, 0x40a, 0x50a, 0x60a, 0x70a, 0x80a, 0x90a, 0xa0a, 0xb0a, 0xc0a, 0xd0a, 0xe0a, 0xf0a},
			{0x00b, 0x10b, 0x20b, 0x30b, 0x40b, 0x50b, 0x60b, 0x70b, 0x80b, 0x90b, 0xa0b, 0xb0b, 0xc0b, 0xd0b, 0xe0b, 0xf0b},
			{0x00c, 0x10c, 0x20c, 0x30c, 0x40c, 0x50c, 0x60c, 0x70c, 0x80c, 0x90c, 0xa0c, 0xb0c, 0xc0c, 0xd0c, 0xe0c, 0xf0c},
			{0x00d, 0x10d, 0x20d, 0x30d, 0x40d, 0x50d, 0x60d, 0x70d, 0x80d, 0x90d, 0xa0d, 0xb0d, 0xc0d, 0xd0d, 0xe0d, 0xf0d},
			{0x00e, 0x10e, 0x20e, 0x30e, 0x40e, 0x50e, 0x60e, 0x70e, 0x80e, 0x90e, 0xa0e, 0xb0e, 0xc0e, 0xd0e, 0xe0e, 0xf0e},
			{0x00f, 0x10f, 0x20f, 0x30f, 0x40f, 0x50f, 0x60f, 0x70f, 0x80f, 0x90f, 0xa0f, 0xb0f, 0xc0f, 0xd0f, 0xe0f, 0xf0f},
		},
		{
			{0x010, 0x110, 0x210, 0x310, 0x410, 0x510, 0x610, 0x710, 0x810, 0x910, 0xa10, 0xb10, 0xc10, 0xd10, 0xe10, 0xf10},
			{0x011, 0x111, 0x211, 0x311, 0x411, 0x511, 0x611, 0x711, 0x811, 0x911, 0xa11, 0xb11, 0xc11, 0xd11, 0xe11, 0xf11},
			{0x012, 0x112, 0x212, 0x312, 0x412, 0x512, 0x612, 0x712, 0x812, 0x912, 0xa12, 0xb12, 0xc12, 0xd12, 0xe12, 0xf12},
			{0x013, 0x113, 0x213, 0x313, 0x413, 0x513, 0x613, 0x713, 0x813, 0x913, 0xa13, 0xb13, 0xc13, 0xd13, 0xe13, 0xf13},
			{0x014, 0x114, 0x214, 0x314, 0x414, 0x514, 0x614, 0x714, 0x814, 0x914, 0xa14, 0xb14, 0xc14, 0xd14, 0xe14, 0xf14},
			{0x015, 0x115, 0x215, 0x315, 0x415, 0x515, 0x615, 0x715, 0x815, 0x915, 0xa15, 0xb15, 0xc15, 0xd15, 0xe15, 0xf15},
			{0x016, 0x116, 0x216, 0x316, 0x416, 0x516, 0x616, 0x716, 0x816, 0x916, 0xa16, 0xb16, 0xc16, 0xd16, 0xe16, 0xf16},
			{0x017, 0x117, 0x217, 0x317, 0x417, 0x517, 0x617, 0x717, 0x817, 0x917, 0xa17, 0xb17, 0xc17, 0xd17, 0xe17, 0xf17},
			{0x018, 0x118, 0x218, 0x318, 0x418, 0x518, 0x618, 0x718, 0x818, 0x918, 0xa18, 0xb18, 0xc18, 0xd18, 0xe18, 0xf18},
			{0x019, 0x119, 0x219, 0x319, 0x419, 0x519, 0x619, 0x719, 0x819, 0x919, 0xa19, 0xb19, 0xc19, 0xd19, 0xe19, 0xf19},
			{0x01a, 0x11a, 0x21a, 0x31a, 0x41a, 0x51a, 0x61a, 0x71a, 0x81a, 0x91a, 0xa1a, 0xb1a, 0xc1a, 0xd1a, 0xe1a, 0xf1a},
			{0x01b, 0x11b, 0x21b, 0x31b, 0x41b, 0x51b, 0x61b, 0x71b, 0x81b, 0x91b, 0xa1b, 0xb1b, 0xc1b, 0xd1b, 0xe1b, 0xf1b},
			{0x01c, 0x11c, 0x21c, 0x31c, 0x41c, 0x51c, 0x61c, 0x71c, 0x81c, 0x91c, 0xa1c, 0xb1c, 0xc1c, 0xd1c, 0xe1c, 0xf1c},
			{0x01d, 0x11d, 0x21d, 0x31d, 0x41d, 0x51d, 0x61d, 0x71d, 0x81d, 0x91d, 0xa1d, 0xb1d, 0xc1d, 0xd1d, 0xe1d, 0xf1d},
			{0x01e, 0x11e, 0x21e, 0x31e, 0x41e, 0x51e, 0x61e, 0x71e, 0x81e, 0x91e, 0xa1e, 0xb1e, 0xc1e, 0xd1e, 0xe1e, 0xf1e},
			{0x01f, 0x11f, 0x21f, 0x31f, 0x41f, 0x51f, 0x61f, 0x71f, 0x81f, 0x91f, 0xa1f, 0xb1f, 0xc1f, 0xd1f, 0xe1f, 0xf1f},
		},
		{
			{0x020, 0x120, 0x220, 0x320, 0x420, 0x520, 0x620, 0x720, 0x820, 0x920, 0xa20, 0xb20, 0xc20, 0xd20, 0xe20, 0xf20},
			{0x021, 0x121, 0x221, 0x321, 0x421, 0x521, 0x621, 0x721, 0x821, 0x921, 0xa21, 0xb21, 0xc21, 0xd21, 0xe21, 0xf21},
			{0x022, 0x122, 0x222, 0x322, 0x422, 0x522, 0x622, 0x722, 0x822, 0x922, 0xa22, 0xb22, 0xc22, 0xd22, 0xe22, 0xf22},
			{0x023, 0x123, 0x223, 0x323, 0x423, 0x523, 0x623, 0x723, 0x823, 0x923, 0xa23, 0xb23, 0xc23, 0xd23, 0xe23, 0xf23},
			{0x024, 0x124, 0x224, 0x324, 0x424, 0x524, 0x624, 0x724, 0x824, 0x924, 0xa24, 0xb24, 0xc24, 0xd24, 0xe24, 0xf24},
			{0x025, 0x125, 0x225, 0x325, 0x425, 0x525, 0x625, 0x725, 0x825, 0x925, 0xa25, 0xb25, 0xc25, 0xd25, 0xe25, 0xf25},
			{0x026, 0x126, 0x226, 0x326, 0x426, 0x526, 0x626, 0x726, 0x826, 0x926, 0xa26, 0xb26, 0xc26, 0xd26, 0xe26, 0xf26},
			{0x027, 0x127, 0x227, 0x327, 0x427, 0x527, 0x627, 0x727, 0x827, 0x927, 0xa27, 0xb27, 0xc27, 0xd27, 0xe27, 0xf27},
			{0x028, 0x128, 0x228, 0x328, 0x428, 0x528, 0x628, 0x728, 0x828, 0x928, 0xa28, 0xb28, 0xc28, 0xd28, 0xe28, 0xf28},
			{0x029, 0x129, 0x229, 0x329, 0x429, 0x529, 0x629, 0x729, 0x829, 0x929, 0xa29, 0xb29, 0xc29, 0xd29, 0xe29, 0xf29},
			{0x02a, 0x12a, 0x22a, 0x32a, 0x42a, 0x52a, 0x62a, 0x72a, 0x82a, 0x92a, 0xa2a, 0xb2a, 0xc2a, 0xd2a, 0xe2a, 0xf2a},
			{0x02b, 0x12b, 0x22b, 0x32b, 0x42b, 0x52b, 0x62b, 0x72b, 0x82b, 0x92b, 0xa2b, 0xb2b, 0xc2b, 0xd2b, 0xe2b, 0xf2b},
			{0x02c, 0x12c, 0x22c, 0x32c, 0x42c, 0x52c, 0x62c, 0x72c, 0x82c, 0x92c, 0xa2c, 0xb2c, 0xc2c, 0xd2c, 0xe2c, 0xf2c},
			{0x02d, 0x12d, 0x22d, 0x32d, 0x42d, 0x52d, 0x62d, 0x72d, 0x82d, 0x92d, 0xa2d, 0xb2d, 0xc2d, 0xd2d, 0xe2d, 0xf2d},
			{0x02e, 0x12e, 0x22e, 0x32e, 0x42e, 0x52e, 0x62e, 0x72e, 0x82e, 0x92e, 0xa2e, 0xb2e, 0xc2e, 0xd2e, 0xe2e, 0xf2e},
			{0x02f, 0x12f, 0x22f, 0x32f, 0x42f, 0x52f, 0x62f, 0x72f, 0x82f, 0x92f, 0xa2f, 0xb2f, 0xc2f, 0xd2f, 0xe2f, 0xf2f},
		},
	}

	var z [3][16][16]uint32

	Transpose(&[16]*[16]uint32{
		(*[16]uint32)(unsafe.Pointer(&chunks[0][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[1][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[2][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[3][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[4][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[5][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[6][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[7][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[8][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[9][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[10][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[11][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[12][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[13][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[14][0])),
		(*[16]uint32)(unsafe.Pointer(&chunks[15][0])),
	}, &z[0])

	Transpose(&[16]*[16]uint32{
		(*[16]uint32)(unsafe.Pointer(&chunks[0][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[1][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[2][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[3][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[4][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[5][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[6][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[7][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[8][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[9][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[10][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[11][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[12][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[13][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[14][16])),
		(*[16]uint32)(unsafe.Pointer(&chunks[15][16])),
	}, &z[1])

	Transpose(&[16]*[16]uint32{
		(*[16]uint32)(unsafe.Pointer(&chunks[0][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[1][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[2][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[3][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[4][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[5][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[6][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[7][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[8][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[9][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[10][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[11][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[12][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[13][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[14][32])),
		(*[16]uint32)(unsafe.Pointer(&chunks[15][32])),
	}, &z[2])

	require.Equal(t, expectedZ, z)
}

func TestG(t *testing.T) {
	for range 100 {
		var a, b, c, d, mx, my [16]uint32

		randUint32Array(&a)
		randUint32Array(&b)
		randUint32Array(&c)
		randUint32Array(&d)
		randUint32Array(&mx)
		randUint32Array(&my)

		aGo, bGo, cGo, dGo := a, b, c, d

		for i := range a {
			aGo[i], bGo[i], cGo[i], dGo[i] = g(aGo[i], bGo[i], cGo[i], dGo[i], mx[i], my[i])
		}

		G(&a, &b, &c, &d, &mx, &my)

		assert.Equal(t, aGo, a)
		assert.Equal(t, bGo, b)
		assert.Equal(t, cGo, c)
		assert.Equal(t, dGo, d)
	}
}

func TestAdd(t *testing.T) {
	x := x
	y := y
	var z [16]uint32

	expectedX := x
	expectedY := y
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = expectedX[i] + expectedY[i]
	}

	Add(&x, &y, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedY, y)
	assert.Equal(t, expectedZ, z)
}

func TestXor(t *testing.T) {
	x := x
	y := y
	var z [16]uint32

	expectedX := x
	expectedY := y
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = expectedX[i] ^ expectedY[i]
	}

	Xor(&x, &y, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedY, y)
	assert.Equal(t, expectedZ, z)
}

func TestRotateRight7(t *testing.T) {
	x := x
	var z [16]uint32

	expectedX := x
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = bits.RotateLeft32(expectedX[i], -7)
	}

	RotateRight7(&x, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedZ, z)
}

func TestRotateRight8(t *testing.T) {
	x := x
	var z [16]uint32

	expectedX := x
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = bits.RotateLeft32(expectedX[i], -8)
	}

	RotateRight8(&x, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedZ, z)
}

func TestRotateRight12(t *testing.T) {
	x := x
	var z [16]uint32

	expectedX := x
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = bits.RotateLeft32(expectedX[i], -12)
	}

	RotateRight12(&x, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedZ, z)
}

func TestRotateRight16(t *testing.T) {
	x := x
	var z [16]uint32

	expectedX := x
	var expectedZ [16]uint32

	for i := range z {
		expectedZ[i] = bits.RotateLeft32(expectedX[i], -16)
	}

	RotateRight16(&x, &z)

	assert.Equal(t, expectedX, x)
	assert.Equal(t, expectedZ, z)
}
